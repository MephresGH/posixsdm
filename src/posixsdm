#!/bin/sh
## posixsdm - POSIX-based Simple Display Manager Script
## Licensed under GPL-3.0

tty_exit() {
	while read -rp "Do you want to return to the TTY, exit or go to the login menu? ([T]TY/[E]xit/[L]ogin) " tel; do
		case "$tel" in
		[Tt])
			printf "\nExiting to TTY shell...\n"
			exec "$SHELL"
			;;
		[Ee])
			printf "\nExiting to TTY login...\n"
			exit 0
			;;
		[Ll])
			printf "\nReturning to posixsdm login...\n"
			case "$run_once" in
			1) warn_user ;;
			"" | *)
				run_once="0"
				graphical_environment=""
				check_condition
				;;
			esac
			;;
		*) printf "Error: invalid input\n\n" ;;
		esac
	done
}

run_desktop() {
	# If $desktop_environment is Wayland, then run Wayland. Otherwise, run Xorg
	# If sx is found, execute Xorg via sx. Otherwise, use startx
	# Read previous input to search for any sessions .desktop files
	# Finally: if nothing is found, warn user
	if [ -f "$sessions"/"$graphical_environment".desktop ] && [ "$1" ]; then
		printf "Running %s%s%s\n" "$red" "$graphical_environment" "$normal"
		export XDG_CURRENT_DESKTOP="$1"
		case "$desktop_environment" in
		"Xorg")
			[ -f /usr/bin/startx ] && x_starter="startx" ||
				[ -f /usr/bin/sx ] && x_starter="sx"
			if [ "$x_starter" ]; then
				export XDG_SESSION_TYPE="x11"
				"$dbus_exec" "$x_starter" "$XDG_CURRENT_DESKTOP" $parameter
			else
				printf "\n\n%sCRITICAL ERROR%s \
				\n%s and %s cannot be run:\nstartx and sx cannot be found \
				\nPlease install startx or sx to fix this issue.\n" "$red" "$normal" "$desktop_environment" "$graphical_environment"
			fi
			;;
		"Wayland")
			if grep -q "uwsm" "$sessions"/"$graphical_environment".desktop; then
				printf "%sERROR:%s The .desktop file you chose uses uwsm.
Please use a non-uwsm managed .desktop file, as POSIXSDM's Wayland manager already uses uwsm by default.\n\n" "$red" "$normal"
			else
				exec uwsm start -- "$XDG_CURRENT_DESKTOP" $parameter
			fi
			;;
		esac
	else
		export XDG_SESSION_TYPE="tty"
		export XDG_CURRENT_DESKTOP=""
		printf "%sERROR:%s invalid input or .desktop file not found\n" "$red" "$normal"
	fi
}

set_desktop() {
	case "$(find "$sessions" -type f | wc -l)" in
	1)
		printf "\nOnly one desktop found"
		run_desktop "$(grep -oP "(?<=Exec=).*" "$sessions"/*.desktop)"
		;;
	0)
		printf "\n%sCRITICAL ERROR%s \
		\nNo %s-based environment has been found." "$red" "$normal" "$desktop_environment"
		read -rp "Press return to go back to the start menu " _
		greeter
		;;
	*)
		printf "\nEntered %s prompt\n" "$desktop_environment"
		while read -rp "What ${desktop_environment} desktop do you want to run? ([V]iew/[E]xit/[INPUT]) " graphical_environment parameter; do
			case "$graphical_environment" in
			[Vv]) find "$sessions" -type f -printf "%f\n" ;;
			[Ee]) tty_exit ;;
			*) run_desktop "$(grep -oP "(?<=Exec=).*" "$sessions"/"$graphical_environment".desktop)" $parameter ;;
			esac
		done
		;;
	esac
}

greeter() {
	clear
	printf "POSIX Shell Display Manager \
	\n\nRecent logins:\n\n%s\n\n" "$(last | head -8)"
	printf "Currently used shell: %s \
	\n\nInstalled desktops:\n\n" "$SHELL"
	find /usr/share/xsessions /usr/share/wayland-sessions -type f
	printf "\n%sNOTE: Ensure that the .desktop files don't contain errors or uninstalled environments.%s\n\n" "$yellow" "$normal"

	while read -rp "Do you want to run an Xorg or Wayland desktop? ([X]org/[W]ayland/[E]xit) " xwe; do
		case "$xwe" in
		[Xx])
			desktop_environment="Xorg"
			sessions="/usr/share/xsessions"
			set_desktop
			;;
		[Ww])
			desktop_environment="Wayland"
			sessions="/usr/share/wayland-sessions"
			set_desktop
			;;
		[Ee]) tty_exit ;;
		*) printf "Error: invalid input\n\n" ;;
		esac
	done
}

warn_user() {
	if [ "$desktop_environment" ] && [ ! -f "$sessions"/"$graphical_environment" ]; then
		empty_desk_denv="The specified desktop doesn't exist, and "
	fi

	while :; do
		printf "%sWARNING: %sTTY1 was not detected or a desktop is running.%s\n" "$yellow" "$empty_desk_denv" "$normal"
		read -rp "Do you want to continue? (Y/N) " yn
		case "$yn" in
		[Yy]) case "$graphical_environment" in
			"") greeter ;;
			*) if [ "$run_once" -eq 1 ]; then
				greeter
			else
				run_desktop
			fi ;;
			esac ;;
		[Nn]) tty_exit ;;
		*) printf "Error: invalid input\n\n" ;;
		esac
	done
}

check_condition() {
	# If $DISPLAY is empty and TTY1 is detected, then view $graphical_environment and run run_desktop()
	# If neither is true, warn the user
	if [ -z "$DISPLAY" ] && [ "$XDG_VTNR" -eq 1 ]; then
		case "$graphical_environment" in
		"") greeter ;;
		*) run_desktop "$run_graphical_environment" ;;
		esac
	else
		run_once=1
		warn_user
	fi
}

# Set variables and parameters for switch statement to handle user input
# Call check_condition() and continue from there
yellow=$(tput setaf 3)
red=$(tput setaf 1)
normal=$(tput sgr0)
graphical_environment="$2"
parameter="$3"
help="Options: --run, --xorg, --wayland, --help"
[ "$parameter" = "" ] && dbus_exec="exec dbus-run-session"

case "$1" in
-[Rr] | --run) check=1 ;;
-[Xx] | --xorg)
	check=1
	desktop_environment="Xorg"
	sessions="/usr/share/xsessions"
	;;
-[Ww] | --wayland)
	check=1
	desktop_environment="Wayland"
	sessions="/usr/share/wayland-sessions"
	;;
-[Hh] | --help) printf "TTY-based display manager written in modern POSIX-compliant Shell \
	\nUsage: posixsdm <option> [...]\n\nOptions: \
	\n-r, --run\t\tRun the script and do a variable check \
	\n-x, --xorg [INPUT] \tRun Xorg-based desktop directly (not recommended) \
	\n-w, --wayland [INPUT]\tRun wayland-based desktop directly (not recommended)\n \
	\n-h, --help\t\tDisplay this help message\n" ;;
"") printf "Error: whitespace detected\nUsage: posixsdm <option> [...]\n%s\n" "$help" ;;
*) printf "Error: %s is not a valid option\nUsage: posixsdm <option> [...]\n%s\n" "$1" "$help" ;;
esac

[ "$sessions" ] && run_graphical_environment=$(grep -oP '(?<=Exec=).*' "$sessions"/"$graphical_environment".desktop)
[ "$check" ] && check_condition "$run_graphical_environment"
